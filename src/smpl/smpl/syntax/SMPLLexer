/* Specification for CrystalGen tokens */

// user customisations
package smpl.syntax;
import java_cup.runtime.*;

// Jlex directives

%%

%cup
%public

%states YYSTRING

%class SMPLLexer

%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%char
%line

%{
    public int getChar() {
	return yychar + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }
%}

nl = \n\r

cc = \b\f{nl}

ws = {cc}\t" "

iic = "("")""[""]""{""}""\"""'"","":"" "";"
%%

<YYINITIAL>	[{ws}]"."[{ws}]	{ return new Symbol(sym.LIT_DOT); }

<YYINITIAL>	[{ws}]"+"[{ws}]	{ return new Symbol(sym.LIT_ADD); }
<YYINITIAL>	[{ws}]"-"[{ws}]	{ return new Symbol(sym.LIT_MINUS); }
<YYINITIAL>	[{ws}]"*"[{ws}]	{ return new Symbol(sym.LIT_MULTIPLY); }
<YYINITIAL>	[{ws}]"/"[{ws}]	{ return new Symbol(sym.LIT_DIVIDE); }
<YYINITIAL>	[{ws}]"%"[{ws}]	{ return new Symbol(sym.LIT_MODULUS); }

<YYINITIAL>	[{ws}]"&"[{ws}]	{ return new Symbol(sym.LIT_BIT_AND); }
<YYINITIAL>	[{ws}]"|"[{ws}]	{ return new Symbol(sym.LIT_BIT_OR); }
<YYINITIAL>	[{ws}]"~"[{ws}]	{ return new Symbol(sym.LIT_BIT_COMP); }

<YYINITIAL>	[{ws}]"="[{ws}]	{ return new Symbol(sym.LIT_REL_EQ); }
<YYINITIAL>	[{ws}]">"[{ws}]	{ return new Symbol(sym.LIT_REL_GT); }
<YYINITIAL>	[{ws}]"<"[{ws}]	{ return new Symbol(sym.LIT_REL_LT); }
<YYINITIAL>	[{ws}]"<="[{ws}]	{ return new Symbol(sym.LIT_REL_LTEQ); }
<YYINITIAL>	[{ws}]">="[{ws}]	{ return new Symbol(sym.LIT_REL_GTEQ); }
<YYINITIAL>	[{ws}]"!="[{ws}]	{ return new Symbol(sym.LIT_REL_NOT_EQ); }

<YYINITIAL>	[{ws}]"and"[{ws}]	{ return new Symbol(sym.LIT_LOGIC_AND); }
<YYINITIAL>	[{ws}]"or"[{ws}]	{ return new Symbol(sym.LIT_LOGIC_OR); }
<YYINITIAL>	[{ws}]"not"[{ws}]	{ return new Symbol(sym.LIT_LOGIC_NOT); }

<YYINITIAL>	[{ws}]"@"[{ws}]	{ return new Symbol(sym.LIT_CONCAT); }

<YYINITIAL>	[{nl}]	{
                    //skip newline, but reset char counter
                    yychar = 0;
                }
<YYINITIAL>	[{ws}]	{
                    // skip whitespace
                }
<YYINITIAL>	"//".*|"/*".*"*/"	{
                    // ignore comments
                 }

<YYINITIAL> [-+]?[0-9]+|"#x"[0-9a-fA-F]+|"#b"[0-1]+ { return new Symbol(sym.INTEGER, yytext()); }
<YYINITIAL> [-+]?([0-9]*"."[0-9]+|[0-9]+"."[0-9]*) { return new Symbol(sym.DOUBLE, yytext()); }


<YYINITIAL> \"[^\"\\]*(\\.[^\"\\]*)*\" {
                    return new Symbol(sym.STRING, yytext()
                        .substring(1, yytext().length() - 1));
                }



<YYINITIAL>	"#"\\[0-9a-fA-F]+	{
                    return new Symbol(sym.HEX_CHARACTER, yytext());
                 }
<YYINITIAL>	"'"(.|"\t"|"\n"|\\\\|"\f"|"\'")"'"	{
                    return new Symbol(sym.CHARACTER, yytext()
                        .substring(1, yytext().length() - 1));
                 }

<YYINITIAL>	"#t"	{ return new Symbol(sym.KW_TRUE); }
<YYINITIAL>	"#f"	{ return new Symbol(sym.KW_FALSE); }
<YYINITIAL>	"#e"	{ return new Symbol(sym.KW_EMPTY_LIST); }
<YYINITIAL>	"be"|"BE"		{ return new Symbol(sym.KW_BE); }
<YYINITIAL>	"ref"|"REF"		{ return new Symbol(sym.KW_REF); }
<YYINITIAL>	"dynamic"|"DYNAMIC"	{ return new Symbol(sym.KW_DYNAMIC); }
<YYINITIAL>	"proc"|"PROC"	{ return new Symbol(sym.KW_PROC); }
<YYINITIAL>	"call"|"CALL"	{ return new Symbol(sym.KW_CALL); }
<YYINITIAL>	"lazy"|"LAZY"	{ return new Symbol(sym.KW_LAZY); }
<YYINITIAL>	"let"|"LET"	{ return new Symbol(sym.KW_LET); }
<YYINITIAL>	"def"|"DEF"	{ return new Symbol(sym.KW_DEF); }

<YYINITIAL>	"if"|"IF"	{ return new Symbol(sym.KW_IF); }
<YYINITIAL>	"then"|"THEN"	{ return new Symbol(sym.KW_THEN); }
<YYINITIAL>	"else"|"ELSE"	{ return new Symbol(sym.KW_ELSE); }

<YYINITIAL>	"case"	{ return new Symbol(sym.KW_CASE); }

<YYINITIAL>	"print"	{ return new Symbol(sym.KW_PRINT); }
<YYINITIAL>	"println"	{ return new Symbol(sym.KW_PRINT_LN); }

<YYINITIAL>	"read"	{ return new Symbol(sym.KW_READ); }
<YYINITIAL>	"readint"	{ return new Symbol(sym.KW_READ_INT); }

<YYINITIAL>	"[:"	{ return new Symbol(sym.LIT_LVBRACKET); }
<YYINITIAL>	":]"	{ return new Symbol(sym.LIT_RVBRACKET); }

<YYINITIAL>	"["	{ return new Symbol(sym.LIT_LBRACKET); }
<YYINITIAL>	"]"	{ return new Symbol(sym.LIT_RBRACKET); }

<YYINITIAL>	"("	{ return new Symbol(sym.LIT_LPAREN); }
<YYINITIAL>	")"	{ return new Symbol(sym.LIT_RPAREN); }

<YYINITIAL>	"{"	{ return new Symbol(sym.LIT_LBRACE); }
<YYINITIAL>	"}"	{ return new Symbol(sym.LIT_RBRACE); }

<YYINITIAL>	":="	{ return new Symbol(sym.LIT_ASSIGN); }
<YYINITIAL>	":"	{ return new Symbol(sym.LIT_COLON); }
<YYINITIAL>	";"	{ return new Symbol(sym.LIT_SEMI_COLON); }
<YYINITIAL>	","	{ return new Symbol(sym.LIT_COMMA); }

<YYINITIAL>	[^#{iic}0-9]+[^{iic}]*|[0-9]+[^{iic}0-9]+[^{iic}]*	{
                    return new Symbol(sym.IDENTIFIER, yytext());
                }
