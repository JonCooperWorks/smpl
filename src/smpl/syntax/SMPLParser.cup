package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message + info);
		}

		public void syntax_error(Symbol cur_token) {
		    report_error("Syntax error on line " + lexer.getLine() +
				     " at char " + lexer.getChar() + ": ",
				 "Token " + cur_token +
				 "(" + lexer.getText() + ")");
		    //		    System.err.print("Line " + lexer.getLine() +
		    //				     " near char " + lexer.getChar() + ": ");
		    //		    System.err.println ("Last token read is " +
		    //					 lexer.getText());
		}
	    :};

init with {:
	  :};
scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LBRACKET, RBRACKET, LVBRACKET, RVBRACKET, LPAREN, RPAREN,
            LBRACE, RBRACE, COLON, SEMI_COLON, COMMA,
            ASSIGN, DOT;

// arithmetic operators
terminal PLUS, MINUS, MULT, DIV, MOD;

// bitwise operators
terminal BIT_AND, BIT_OR, BIT_COMP;

// relational operators
terminal EQ, GT, LT, GTEQ, LTEQ, NOT_EQ;

// bitwise operators
terminal LOGIC_AND, LOGIC_OR, LOGIC_NOT;

// other operators
terminal CONCAT;

// special keywords
terminal TRUE, FALSE, EMPTY_LIST,
			PAIR, PAIR_QS, CAR, CDR, SIZE, EQV, EQ_COMPARE, SUBSTR,
			PROC, CALL, LAZY, LET, DEF, IF,
			THEN, ELSE, CASE, PRINT, PRINT_LN, READ, READ_INT, BE,
			DYNAMIC, REF;

// terminals with values
terminal String STRING;
terminal String CHARACTER;
terminal String HEX_CHARACTER;
terminal String IDENTIFIER;
terminal String INTEGER;
terminal String DOUBLE;


// fill in all other terminals and non-terminals here
non terminal ASTBooleanConstantExpression boolean;
non terminal ASTString string;
non terminal ASTCharacter character;
non terminal ASTIdentifier identifier;
non terminal ASTIdentifier identifier2;
non terminal ASTInteger integer;
non terminal ASTDouble double;

non terminal ASTProgram program;
non terminal ASTStatementSequence stmtList;
non terminal ASTExpression stmt;
non terminal ASTExpression stmt2;
non terminal ASTExpression nonIfStmt;
non terminal ASTExpression ifThenExp;
non terminal ASTExpression ifThenElseExp;
non terminal ASTExpression procExpression;
non terminal ASTCaseClauseList caseClauseList;
non terminal ASTCaseExpression caseExp;
non terminal ASTCaseClasue caseClause;
non terminal ASTExpression expression;
non terminal ASTExpression expression2;
non terminal ASTDynamicBindingsExpression dynamicBindings;
non terminal ASTLetAliasDefinitionExpansionExpression letExp;
non terminal ASTAliasDefinitionList aliasBindingList;
non terminal ASTAliasDefinition aliasBinding;
non terminal ASTLazyEvaluationExpression lazyExp;
non terminal ASTListCreationExpression listDefn;
non terminal ASTVectorCreationExpression vectorDefn;
non terminal ASTExpressionList expressionList;
non terminal ASTVectorComprehensionExpression vectorComprehension;
non terminal ASTExpression vectorIndex;
non terminal ASTExpression procedureDefn;
non terminal ASTIdentifierList identifierList;
non terminal ASTCallProcedureExpression procedureCall;
non terminal ASTArgumentList argList;
non terminal ASTSpecialCallProcedureExpression procedureSpecialCall;
non terminal ASTAliasDefinition aliasDefn;
non terminal ASTMultipleAliasAssignment aliasAssign;
non terminal ASTExpression logicalOrExp;
non terminal ASTExpression logicalAndExp;
non terminal ASTExpression logicalNotExp;
non terminal ASTExpression relationalExp;
non terminal ASTExpression bitwiseExp;
non terminal ASTExpression arithExp;
non terminal ASTExpression arithTerm;
non terminal ASTExpression arithComplement;
non terminal ASTExpression arithFactor;

non terminal empty;

/* Grammar rules */
program ::= stmtList:s {: RESULT = new ASTProgram(s); :};

stmtList ::= stmtList:seq stmt:s {: RESULT = seq.add(s); :}
                 | stmt:s {: RESULT = new ASTStatementSequence(s); :};


stmt ::= aliasDefn:e SEMI_COLON {: RESULT = e; :} |
		aliasAssign:e SEMI_COLON {: RESULT = e; :}|
		dynamicBindings:e SEMI_COLON {: RESULT = e; :} |
		stmt2:e SEMI_COLON {: RESULT = e; :};
		
stmt2 ::= ifThenExp:i  {: RESULT = i; :} |
		nonIfStmt:s {: RESULT = s; :};
		
ifThenExp ::= IF expression2:e THEN stmt2:c SEMI_COLON
					{: RESULT = new ASTIfThenElseExpression(e, c); :} |
				IF expression2:e THEN stmt2:c ELSE stmt2:e2 SEMI_COLON
					{: RESULT = new ASTIfThenElseExpression(e, c, e2); :};
				

nonIfStmt ::= expression:e  {: RESULT = e; :};
				

dynamicBindings ::= DYNAMIC identifierList:l 
				{: RESULT = new ASTDynamicBindingsExpression(l); :};

caseExp ::= CASE LBRACE caseClauseList:l RBRACE
				{: RESULT = new ASTCaseExpression(l); :};
				
caseClauseList ::= caseClauseList:l COMMA caseClause:e {: RESULT = l; l.add(e); :} |
				caseClause:e {: RESULT = new ASTCaseClauseList(e); :};
				
caseClause ::= expression:e COLON expression:e2
			{: RESULT = new ASTCaseClasue(e, e2); :};

caseClause ::= ELSE  COLON expression:e2 
			{: RESULT = new ASTCaseClasue(new ASTBooleanConstantExpression(true), e2); :};

expression ::= procedureDefn:p {: RESULT = p; :} |
				letExp:e  {: RESULT = e; :} |
				caseExp:e  {: RESULT = e; :} |
				expression2:e {: RESULT = e; :};

expression2 ::= LBRACE stmtList:l RBRACE {: RESULT = new ASTStatementSequenceExpression(l); :};
				

expression2 ::= logicalOrExp:e {: RESULT = e; :};

expression2 ::= PRINT LPAREN stmt2:e RPAREN
			{: RESULT = new ASTPrintExpression(e); :};
expression2 ::= PRINT_LN LPAREN stmt2:e RPAREN
			{: RESULT = new ASTPrintLnExpression(e); :};

expression2 ::= READ LPAREN RPAREN {: RESULT = new ASTReadStringExpression(); :};
expression2 ::= READ_INT LPAREN RPAREN {: RESULT = new ASTReadIntegerExpression(); :};

aliasAssign ::= identifierList:l ASSIGN expression:e {: RESULT = new ASTMultipleAliasAssignment(l, e); :} ;
				
aliasDefn ::= DEF identifier:i expression:e {: RESULT = new ASTAliasDefinition(i, e); :};

logicalOrExp ::= logicalOrExp:e LOGIC_OR logicalAndExp:e2 {: RESULT = new ASTLogicalOrExpression(e, e2); :} |
			logicalAndExp:e {: RESULT = e; :};
		
logicalAndExp ::= logicalAndExp:e LOGIC_AND logicalNotExp:e2 {: RESULT = new ASTLogicalAndExpression(e, e2); :} |
			logicalNotExp:e {: RESULT = e; :};
		
logicalNotExp ::= LOGIC_NOT logicalNotExp:e {: RESULT = new ASTLogicalNotExpression(e); :} |
			relationalExp:e {: RESULT = e; :};

relationalExp ::= relationalExp:e EQ bitwiseExp:e2 {: RESULT = new ASTRelationalEqualExpression(e, e2); :} |
			relationalExp:e GT bitwiseExp:e2 {: RESULT = new ASTRelationalGreaterThanExpression(e, e2); :} |
			relationalExp:e LT bitwiseExp:e2 {: RESULT = new ASTRelationalLessThanExpression(e, e2); :} |
			relationalExp:e GTEQ bitwiseExp:e2 {: RESULT = new ASTRelationalGreaterThanOrEqualExpression(e, e2); :} |
			relationalExp:e LTEQ bitwiseExp:e2 {: RESULT = new ASTRelationalLessThanOrEqualExpression(e, e2); :} |
			relationalExp:e NOT_EQ bitwiseExp:e2 {: RESULT = new ASTRelationalNotEqualExpression(e, e2); :} |
			bitwiseExp:e {: RESULT = e; :};

bitwiseExp ::= bitwiseExp:e BIT_AND arithExp:e2 {: RESULT = new ASTBitwiseAndExpression(e, e2); :} |
			bitwiseExp:e BIT_OR arithExp:e2 {: RESULT = new ASTBitwiseOrExpression(e, e2); :} |
			bitwiseExp:e CONCAT arithExp:e2 {: RESULT = new ASTListConcatExpression(e, e2); :} |
			arithExp:e {: RESULT = e; :};

arithExp ::= arithExp:e PLUS arithTerm:t {: RESULT = new ASTAddExpression(e, t); :} |
			LPAREN MINUS arithExp:e RPAREN {: RESULT = new ASTNegationExpression(e); :} |
			arithExp:e MINUS arithTerm:t {: RESULT = new ASTMinusExpression(e, t); :} |
			arithTerm:t {: RESULT = t; :};

arithTerm ::= arithTerm:t MULT arithComplement:c {: RESULT = new ASTMultiplyExpression(t, c); :} |
	 		arithTerm:t DIV arithComplement:c {:	RESULT = new ASTDivideExpression(t, c); :} |
	 		arithTerm:t MOD arithComplement:c {: RESULT = new ASTModulusExpression(t, c); :} |
	 		arithComplement:c {: RESULT = c; :};

arithComplement ::= BIT_COMP arithComplement:c {: RESULT = new ASTBitwiseComplementExpression(c); :} |
	 		arithFactor:f {: RESULT = f; :};

arithFactor ::= integer:i {: RESULT = i; :} |
			boolean:b {: RESULT = b; :} |
			string:s {: RESULT = s; :} |
			character:c {: RESULT = c; :} |
	   		double:d {: RESULT = d; :} |
	   		identifier:i {: RESULT = i; :} |
	   		listDefn:e {: RESULT = e; :} |
	   		vectorDefn:v {: RESULT = v; :} |
	   		vectorIndex:v {: RESULT = v; :} |
			procedureCall:p {: RESULT = p; :} |
			procedureSpecialCall:p {: RESULT = p; :} |
			lazyExp:e {: RESULT = e; :} |			
	   		LPAREN expression:e RPAREN {: RESULT = e; :};

string ::= STRING:s {: RESULT = new ASTString(s); :};
character ::= CHARACTER:c {: RESULT = new ASTCharacter(c); :};
character ::= HEX_CHARACTER:c {: RESULT = new ASTCharacter(c, true); :};

procedureDefn ::= PROC LPAREN identifierList:a RPAREN procExpression:e 
				{: RESULT = new ASTCreateProcedureExpression(a, e); :} |
			PROC LPAREN identifierList:a DOT identifier:i RPAREN procExpression:e 
				{: RESULT = new ASTCreateVariableAriyProcedureExpression(a, i, e); :} |
			PROC identifier:i procExpression:e 
				{: RESULT = new ASTCreateOpenAriyProcedureExpression(i, e); :};

procExpression ::= stmt2:e {: RESULT = e; :};
			
identifierList ::= identifierList:l COMMA identifier2:i {: RESULT = l; l.add(i); :} |
				identifier2:i {: RESULT = new ASTIdentifierList(i); :};

identifier2 ::= REF identifier:i {: i.setIsReference(); RESULT = i; :} |
			identifier:i {: RESULT = i; :};
			
procedureSpecialCall ::= CALL LPAREN expression:e COMMA expression:e2 RPAREN
				{: RESULT = new ASTSpecialCallProcedureExpression(e, e2); :};

procedureCall ::= arithFactor:e LPAREN argList:l RPAREN 
				{: RESULT = new ASTCallProcedureExpression(e, l); :};

argList ::= argList:l COMMA expression:e {: RESULT = l; l.add(e); :} |
				expression:e {: RESULT = new ASTArgumentList(e); :};

lazyExp ::= LAZY LPAREN expression:e RPAREN
				{: RESULT = new ASTLazyEvaluationExpression(e); :};

letExp ::= LET LPAREN aliasBindingList:l RPAREN expression:e 
				{: RESULT = new ASTLetAliasDefinitionExpansionExpression(l, e); :};

aliasBindingList ::= aliasBindingList:l COMMA aliasBinding:b {: RESULT = l; l.add(b); :} |
				aliasBinding:b {: RESULT = new ASTAliasDefinitionList(b); :};
				
aliasBinding ::= identifier:i BE expression:e {: RESULT = new ASTAliasDefinition(i, e); :};

listDefn ::= LBRACKET expressionList:l RBRACKET 
				{: RESULT = new ASTListCreationExpression(l); :} |
			EMPTY_LIST {: RESULT = new ASTNillList(); :} |
			LBRACKET RBRACKET {: RESULT = new ASTNillList(); :};

vectorDefn ::= LVBRACKET expressionList:l RVBRACKET 
				{: RESULT = new ASTVectorCreationExpression(l); :} |
				LVBRACKET RVBRACKET
				{: RESULT = new ASTVectorCreationExpression(); :};
				
expressionList ::= expressionList:l COMMA expression:e {: RESULT = l; l.add(e); :} |
			expressionList:l COMMA vectorComprehension:e {: RESULT = l; l.add(e); :} |
			vectorComprehension:e {: RESULT = new ASTExpressionList(e); :} |
			expression:e {: RESULT = new ASTExpressionList(e); :};

vectorComprehension ::= expression:e COLON expression:e2
			{: RESULT = new ASTVectorComprehensionExpression(e, e2); :};

vectorIndex ::= arithFactor:e LBRACKET arithFactor:e2 RBRACKET
			{: RESULT = new ASTVectorIndexAccessExpression(e2, e); :};
			
identifier ::= IDENTIFIER:i {: RESULT = new ASTIdentifier(i); :};

integer ::= INTEGER:i {: RESULT = new ASTInteger(i); :};
double ::= DOUBLE:d {: RESULT = new ASTDouble(d); :};

boolean ::= FALSE {: RESULT = new ASTBooleanConstantExpression(false); :};
boolean ::= TRUE {: RESULT = new ASTBooleanConstantExpression(true); :};

empty ::= ;
