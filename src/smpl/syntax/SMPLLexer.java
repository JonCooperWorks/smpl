/* The following code was generated by JFlex 1.4.3 on 12/31/13 10:53 AM */

package smpl.syntax;
import java_cup.runtime.*;

// Jlex directives


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/31/13 10:53 AM from the specification file
 * <tt>src/smpl/syntax/SMPLLexer.jflex</tt>
 */
public class SMPLLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\6\1\1\1\1\1\34\1\6\1\1\1\1\22\6\1\4\1\24"+
    "\1\35\1\5\1\6\1\15\1\16\1\40\1\105\1\106\1\13\1\11"+
    "\1\7\1\12\1\10\1\14\12\2\1\103\1\3\1\23\1\21\1\22"+
    "\1\45\1\33\1\67\1\56\1\37\1\64\1\57\1\61\1\0\1\100"+
    "\1\71\2\0\1\74\1\70\1\66\1\73\1\72\1\0\1\60\1\101"+
    "\1\76\4\0\1\65\1\75\1\102\1\36\1\104\1\0\1\0\1\0"+
    "\1\25\1\55\1\46\1\27\1\42\1\41\1\0\1\77\1\44\2\0"+
    "\1\54\1\63\1\26\1\30\1\43\1\51\1\31\1\47\1\32\1\53"+
    "\1\52\2\0\1\62\1\50\1\107\1\17\1\110\1\20\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\0\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\7\1\1\22\2\1\1\0"+
    "\17\1\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\1\1\3\1\1\1\32\1\0\1\33\1\34\1\35"+
    "\1\1\1\36\1\37\1\40\1\41\4\1\1\42\2\1"+
    "\1\0\1\43\1\0\1\1\2\0\4\1\1\44\6\1"+
    "\1\45\10\1\1\46\1\47\1\50\1\35\1\51\1\0"+
    "\1\1\1\36\1\52\1\53\1\54\2\1\1\55\1\1"+
    "\1\43\1\1\1\56\6\1\1\57\2\1\1\60\3\1"+
    "\1\61\5\1\1\0\1\36\1\1\1\62\1\63\1\64"+
    "\1\65\1\1\1\66\1\67\1\70\1\1\1\71\1\72"+
    "\1\1\1\73\1\1\1\36\3\1\1\74\1\75\4\1"+
    "\1\76\1\1\1\77\1\1\1\100\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\111\0\222\0\333\0\333\0\u0124\0\333"+
    "\0\u016d\0\111\0\111\0\111\0\u01b6\0\111\0\111\0\111"+
    "\0\111\0\111\0\u01ff\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c"+
    "\0\u03b5\0\u03fe\0\u0447\0\111\0\u0490\0\u04d9\0\u0522\0\u056b"+
    "\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3"+
    "\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb"+
    "\0\333\0\333\0\333\0\333\0\333\0\u0a44\0\u0a8d\0\u0ad6"+
    "\0\333\0\u0b1f\0\333\0\333\0\u016d\0\u0b68\0\u0bb1\0\111"+
    "\0\111\0\111\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\111\0\u0d1e"+
    "\0\u0d67\0\u0db0\0\111\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d"+
    "\0\u0f66\0\u0faf\0\u0ff8\0\111\0\u1041\0\u108a\0\u10d3\0\u111c"+
    "\0\u1165\0\u11ae\0\111\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b"+
    "\0\u1364\0\u13ad\0\u13f6\0\333\0\333\0\333\0\u0ad6\0\u0b1f"+
    "\0\u143f\0\u1488\0\u14d1\0\111\0\111\0\111\0\u151a\0\u1563"+
    "\0\111\0\u15ac\0\333\0\u15f5\0\333\0\u163e\0\u1687\0\u16d0"+
    "\0\u1719\0\u1762\0\u17ab\0\111\0\u17f4\0\u183d\0\111\0\u1886"+
    "\0\u18cf\0\u1918\0\111\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85"+
    "\0\u1ace\0\u0b68\0\u1b17\0\u1b60\0\111\0\111\0\111\0\u1ba9"+
    "\0\111\0\u1bf2\0\111\0\u1c3b\0\111\0\111\0\u1c84\0\111"+
    "\0\u1ccd\0\u143f\0\u1d16\0\u1d5f\0\u1da8\0\111\0\u1df1\0\u1e3a"+
    "\0\u1e83\0\u1ecc\0\u1f15\0\111\0\u1f5e\0\111\0\u1fa7\0\111"+
    "\0\111\0\111";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\3\1\35\1\0\1\36"+
    "\1\37\1\2\1\40\1\41\1\42\1\2\1\43\1\44"+
    "\4\2\1\45\1\46\1\47\1\50\1\51\3\2\1\52"+
    "\4\2\1\53\1\54\1\2\1\55\1\2\1\56\3\2"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\3\2"+
    "\2\0\2\2\1\0\26\2\1\0\1\2\1\0\41\2"+
    "\7\0\1\66\1\0\1\67\1\66\4\0\1\70\4\66"+
    "\2\0\5\66\1\0\7\66\3\0\1\66\1\0\41\66"+
    "\152\0\1\71\3\0\1\72\2\0\1\73\1\74\46\0"+
    "\2\2\1\75\2\0\2\2\1\0\26\2\1\0\1\2"+
    "\1\0\41\2\7\0\3\2\2\0\2\2\1\0\3\2"+
    "\1\76\1\77\21\2\1\0\1\2\1\0\41\2\7\0"+
    "\3\2\2\0\2\2\1\0\11\2\1\100\14\2\1\0"+
    "\1\2\1\0\41\2\7\0\3\2\2\0\2\2\1\0"+
    "\11\2\1\101\14\2\1\0\1\2\1\0\41\2\7\0"+
    "\3\2\2\0\2\2\1\0\11\2\1\102\14\2\1\0"+
    "\1\2\1\0\41\2\7\0\3\2\2\0\2\2\1\0"+
    "\16\2\1\103\7\2\1\0\1\2\1\0\41\2\7\0"+
    "\3\2\2\0\2\2\1\0\20\2\1\104\5\2\1\0"+
    "\1\2\1\0\41\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\1\2\1\105\17\2\1\106"+
    "\17\2\7\0\3\2\2\0\2\2\1\0\21\2\1\107"+
    "\4\2\1\0\1\2\1\0\41\2\7\0\3\2\2\0"+
    "\2\2\1\0\26\2\1\0\1\2\1\0\1\2\1\110"+
    "\37\2\7\0\3\2\2\0\2\2\1\0\26\2\1\0"+
    "\1\2\1\0\36\2\1\111\2\2\7\0\3\35\2\112"+
    "\2\35\1\112\25\35\1\113\1\114\1\35\1\112\41\35"+
    "\7\112\3\2\2\0\2\2\1\0\26\2\1\0\1\2"+
    "\1\0\26\2\1\115\12\2\7\0\36\116\1\117\52\116"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\10\2\1\120\2\2\1\121\25\2\7\0\3\2\2\0"+
    "\2\2\1\0\15\2\1\122\3\2\1\123\4\2\1\0"+
    "\1\2\1\0\41\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\1\124\40\2\7\0\3\2"+
    "\2\0\2\2\1\0\15\2\1\125\1\2\1\126\6\2"+
    "\1\0\1\2\1\0\41\2\7\0\3\2\2\0\2\2"+
    "\1\0\26\2\1\0\1\2\1\0\3\2\1\127\6\2"+
    "\1\130\26\2\7\0\3\2\2\0\2\2\1\0\15\2"+
    "\1\131\10\2\1\0\1\2\1\0\1\2\1\132\37\2"+
    "\7\0\3\2\2\0\2\2\1\0\26\2\1\0\1\2"+
    "\1\0\1\2\1\133\37\2\7\0\3\2\2\0\2\2"+
    "\1\0\26\2\1\0\1\2\1\0\16\2\1\133\22\2"+
    "\7\0\3\2\2\0\2\2\1\0\26\2\1\0\1\2"+
    "\1\0\33\2\1\134\5\2\7\0\3\2\2\0\2\2"+
    "\1\0\26\2\1\0\1\2\1\0\16\2\1\135\22\2"+
    "\7\0\3\2\2\0\2\2\1\0\26\2\1\0\1\2"+
    "\1\0\16\2\1\136\5\2\1\137\14\2\7\0\3\2"+
    "\2\0\2\2\1\0\26\2\1\0\1\2\1\0\20\2"+
    "\1\124\20\2\7\0\3\2\2\0\2\2\1\0\26\2"+
    "\1\0\1\2\1\0\17\2\1\140\21\2\7\0\3\2"+
    "\2\0\2\2\1\0\26\2\1\0\1\2\1\0\16\2"+
    "\1\141\7\2\1\142\12\2\7\0\3\2\2\0\2\2"+
    "\1\0\26\2\1\0\1\2\1\0\37\2\1\143\1\2"+
    "\112\0\1\144\26\0\1\145\62\0\1\146\4\0\1\66"+
    "\1\2\2\66\1\0\2\2\1\0\5\66\2\2\5\66"+
    "\1\2\7\66\2\2\1\0\1\66\1\0\41\66\7\0"+
    "\1\66\1\2\1\67\1\66\1\0\2\2\1\0\1\70"+
    "\4\66\2\2\5\66\1\2\7\66\2\2\1\0\1\66"+
    "\1\0\41\66\7\0\1\66\1\2\1\147\1\66\1\0"+
    "\2\2\1\0\5\66\2\2\5\66\1\2\7\66\2\2"+
    "\1\0\1\66\1\0\41\66\11\0\1\150\22\0\1\150"+
    "\1\0\1\150\7\0\1\150\1\0\2\150\3\0\1\150"+
    "\6\0\3\150\1\0\1\150\2\0\1\150\2\0\1\150"+
    "\21\0\3\76\2\151\2\76\1\151\3\76\1\152\20\76"+
    "\1\2\1\76\1\151\1\76\1\151\41\76\7\151\3\77"+
    "\2\153\2\77\1\153\24\77\1\2\1\77\1\153\1\77"+
    "\1\153\41\77\7\153\3\2\2\0\2\2\1\0\17\2"+
    "\1\154\6\2\1\0\1\2\1\0\41\2\7\0\3\2"+
    "\2\0\2\2\1\0\22\2\1\155\3\2\1\0\1\2"+
    "\1\0\41\2\7\0\3\2\2\0\2\2\1\0\26\2"+
    "\1\0\1\2\1\0\1\156\40\2\7\0\3\2\2\0"+
    "\2\2\1\0\16\2\1\157\7\2\1\0\1\2\1\0"+
    "\41\2\7\0\3\2\2\0\2\2\1\0\15\2\1\160"+
    "\10\2\1\0\1\2\1\0\1\161\40\2\7\0\3\2"+
    "\2\0\2\2\1\0\26\2\1\0\1\2\1\0\1\2"+
    "\1\162\37\2\7\0\35\112\1\163\1\114\106\112\1\0"+
    "\54\112\3\2\2\0\2\2\1\0\26\2\1\0\1\2"+
    "\1\0\33\2\1\164\5\2\47\0\1\165\106\0\1\116"+
    "\1\0\1\165\50\0\3\2\2\0\2\2\1\0\26\2"+
    "\1\0\1\2\1\0\11\2\1\166\1\167\26\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\6\2\1\170\32\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\3\2\1\171\35\2\7\0"+
    "\3\2\2\0\2\2\1\0\20\2\1\172\5\2\1\0"+
    "\1\2\1\0\3\2\1\173\35\2\7\0\3\2\2\0"+
    "\2\2\1\0\21\2\1\174\4\2\1\0\1\2\1\0"+
    "\6\2\1\175\4\2\1\176\25\2\7\0\3\2\2\0"+
    "\2\2\1\0\21\2\1\177\4\2\1\0\1\2\1\0"+
    "\41\2\7\0\3\2\2\0\2\2\1\0\26\2\1\0"+
    "\1\2\1\0\7\2\1\200\31\2\7\0\3\2\2\0"+
    "\2\2\1\0\26\2\1\0\1\2\1\0\14\2\1\201"+
    "\24\2\7\0\3\2\2\0\2\2\1\0\26\2\1\0"+
    "\1\2\1\0\7\2\1\202\31\2\7\0\3\2\2\0"+
    "\2\2\1\0\22\2\1\203\3\2\1\0\1\2\1\0"+
    "\41\2\7\0\3\2\2\0\2\2\1\0\26\2\1\0"+
    "\1\2\1\0\40\2\1\204\7\0\3\2\2\0\2\2"+
    "\1\0\26\2\1\0\1\2\1\0\20\2\1\161\20\2"+
    "\7\0\3\2\2\0\2\2\1\0\26\2\1\0\1\2"+
    "\1\0\20\2\1\156\20\2\7\0\3\2\2\0\2\2"+
    "\1\0\26\2\1\0\1\2\1\0\25\2\1\205\13\2"+
    "\7\0\3\2\2\0\2\2\1\0\26\2\1\0\1\2"+
    "\1\0\32\2\1\206\6\2\7\0\3\2\2\0\2\2"+
    "\1\0\26\2\1\0\1\2\1\0\35\2\1\203\3\2"+
    "\7\0\3\2\2\0\2\2\1\0\26\2\1\0\1\2"+
    "\1\0\34\2\1\207\4\2\7\0\3\2\2\0\2\2"+
    "\1\0\26\2\1\0\1\2\1\0\16\2\1\210\22\2"+
    "\7\0\13\151\1\211\20\151\1\0\54\151\3\76\2\151"+
    "\2\76\1\151\3\76\1\152\1\212\17\76\1\2\1\76"+
    "\1\151\1\76\1\151\41\76\7\151\34\153\1\0\54\153"+
    "\3\2\2\0\2\2\1\0\15\2\1\213\10\2\1\0"+
    "\1\2\1\0\41\2\7\0\3\2\2\0\2\2\1\0"+
    "\17\2\1\214\6\2\1\0\1\2\1\0\41\2\7\0"+
    "\3\2\2\0\2\2\1\0\16\2\1\215\7\2\1\0"+
    "\1\2\1\0\41\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\33\2\1\216\5\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\4\2\1\217\34\2\7\0\3\2\2\0\2\2\1\0"+
    "\15\2\1\220\10\2\1\0\1\2\1\0\41\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\1\2\1\221\37\2\7\0\3\2\2\0\2\2\1\0"+
    "\21\2\1\222\4\2\1\0\1\2\1\0\41\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\5\2\1\223\33\2\7\0\3\2\2\0\2\2\1\0"+
    "\16\2\1\224\7\2\1\0\1\2\1\0\41\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\1\2\1\225\37\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\13\2\1\216\25\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\1\2\1\226\37\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\6\2\1\227\32\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\21\2\1\230\17\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\16\2\1\221\22\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\26\2\1\231\12\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\223\1\0\41\2\7\0\3\2\2\0"+
    "\2\2\1\0\26\2\1\0\1\2\1\0\24\2\1\230"+
    "\14\2\7\0\3\2\2\0\2\2\1\0\26\2\1\0"+
    "\1\2\1\0\25\2\1\215\13\2\7\0\13\151\1\211"+
    "\1\232\17\151\1\0\54\151\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\22\2\1\233\16\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\3\2\1\234\35\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\13\2\1\235\25\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\4\2\1\236\34\2\7\0\3\2\2\0\2\2\1\0"+
    "\22\2\1\237\3\2\1\0\1\2\1\0\41\2\7\0"+
    "\3\2\2\0\2\2\1\0\22\2\1\240\3\2\1\0"+
    "\1\2\1\0\41\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\27\2\1\241\11\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\3\2\1\242\35\2\7\0\3\2\2\0\2\2\1\0"+
    "\16\2\1\243\7\2\1\0\1\2\1\0\41\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\4\2\1\244\34\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\13\2\1\245\25\2\7\0"+
    "\3\2\2\0\2\2\1\0\21\2\1\246\4\2\1\0"+
    "\1\2\1\0\41\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\2\1\0\30\2\1\247\10\2\7\0"+
    "\3\2\2\0\2\2\1\0\26\2\1\0\1\2\1\0"+
    "\5\2\1\250\33\2\7\0\3\2\2\0\2\2\1\0"+
    "\22\2\1\251\3\2\1\0\1\2\1\0\41\2\7\0"+
    "\3\2\2\0\2\2\1\0\16\2\1\252\7\2\1\0"+
    "\1\2\1\0\41\2\7\0\3\2\2\0\2\2\1\0"+
    "\26\2\1\0\1\250\1\0\41\2\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\2\11\1\0\1\11\26\1\1\0\21\1"+
    "\5\11\3\1\1\11\1\0\2\11\15\1\1\0\1\1"+
    "\1\0\1\1\2\0\24\1\3\11\2\1\1\0\11\1"+
    "\1\11\1\1\1\11\23\1\1\0\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public int getChar() {
	return yychar + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SMPLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SMPLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return new Symbol(sym.MOD);
          }
        case 67: break;
        case 20: 
          { return new Symbol(sym.COLON);
          }
        case 68: break;
        case 56: 
          { return new Symbol(sym.PROC);
          }
        case 69: break;
        case 64: 
          { return new Symbol(sym.DYNAMIC);
          }
        case 70: break;
        case 1: 
          { return new Symbol(sym.IDENTIFIER, yytext());
          }
        case 71: break;
        case 36: 
          { return new Symbol(sym.IF);
          }
        case 72: break;
        case 30: 
          { // ignore comments
          }
        case 73: break;
        case 21: 
          { return new Symbol(sym.RBRACKET);
          }
        case 74: break;
        case 31: 
          { return new Symbol(sym.GTEQ);
          }
        case 75: break;
        case 44: 
          { return new Symbol(sym.DEF);
          }
        case 76: break;
        case 46: 
          { return new Symbol(sym.CHARACTER, yytext()
                        .substring(1, yytext().length() - 1));
          }
        case 77: break;
        case 38: 
          { return new Symbol(sym.LVBRACKET);
          }
        case 78: break;
        case 15: 
          { return new Symbol(sym.EQ);
          }
        case 79: break;
        case 2: 
          { // skip whitespace
          }
        case 80: break;
        case 4: 
          { return new Symbol(sym.SEMI_COLON);
          }
        case 81: break;
        case 41: 
          { return new Symbol(sym.HEX_CHARACTER, yytext());
          }
        case 82: break;
        case 23: 
          { return new Symbol(sym.RPAREN);
          }
        case 83: break;
        case 45: 
          { return new Symbol(sym.REF);
          }
        case 84: break;
        case 28: 
          { return new Symbol(sym.EMPTY_LIST);
          }
        case 85: break;
        case 63: 
          { return new Symbol(sym.SUBSTR);
          }
        case 86: break;
        case 49: 
          { return new Symbol(sym.LET);
          }
        case 87: break;
        case 8: 
          { return new Symbol(sym.MINUS);
          }
        case 88: break;
        case 7: 
          { return new Symbol(sym.PLUS);
          }
        case 89: break;
        case 3: 
          { // INTEGER
         return new Symbol(sym.INTEGER,
         new Integer(yytext()));
          }
        case 90: break;
        case 37: 
          { return new Symbol(sym.BE);
          }
        case 91: break;
        case 58: 
          { return new Symbol(sym.SIZE);
          }
        case 92: break;
        case 26: 
          { return new Symbol(sym.TRUE);
          }
        case 93: break;
        case 61: 
          { return new Symbol(sym.PRINT);
          }
        case 94: break;
        case 47: 
          { return new Symbol(sym.CAR);
          }
        case 95: break;
        case 57: 
          { return new Symbol(sym.CASE);
          }
        case 96: break;
        case 54: 
          { return new Symbol(sym.ELSE);
          }
        case 97: break;
        case 24: 
          { return new Symbol(sym.LBRACE);
          }
        case 98: break;
        case 34: 
          { return new Symbol(sym.LOGIC_OR);
          }
        case 99: break;
        case 9: 
          { return new Symbol(sym.MULT);
          }
        case 100: break;
        case 5: 
          { return new Symbol(sym.COMMA);
          }
        case 101: break;
        case 51: 
          { return new Symbol(sym.THEN);
          }
        case 102: break;
        case 55: 
          { return new Symbol(sym.PAIR);
          }
        case 103: break;
        case 27: 
          { return new Symbol(sym.FALSE);
          }
        case 104: break;
        case 39: 
          { return new Symbol(sym.ASSIGN);
          }
        case 105: break;
        case 59: 
          { return new Symbol(sym.LAZY);
          }
        case 106: break;
        case 18: 
          { return new Symbol(sym.CONCAT);
          }
        case 107: break;
        case 60: 
          { return new Symbol(sym.PAIR_QS);
          }
        case 108: break;
        case 48: 
          { return new Symbol(sym.CDR);
          }
        case 109: break;
        case 35: 
          { return new Symbol(sym.STRING, yytext()
                        .substring(1, yytext().length() - 1));
          }
        case 110: break;
        case 6: 
          { return new Symbol(sym.DOT);
          }
        case 111: break;
        case 14: 
          { return new Symbol(sym.BIT_COMP);
          }
        case 112: break;
        case 62: 
          { return new Symbol(sym.EQ_COMPARE);
          }
        case 113: break;
        case 16: 
          { return new Symbol(sym.GT);
          }
        case 114: break;
        case 32: 
          { return new Symbol(sym.LTEQ);
          }
        case 115: break;
        case 52: 
          { return new Symbol(sym.CALL);
          }
        case 116: break;
        case 66: 
          { return new Symbol(sym.PRINT_LN);
          }
        case 117: break;
        case 17: 
          { return new Symbol(sym.LT);
          }
        case 118: break;
        case 12: 
          { return new Symbol(sym.BIT_AND);
          }
        case 119: break;
        case 65: 
          { return new Symbol(sym.READ_INT);
          }
        case 120: break;
        case 50: 
          { return new Symbol(sym.READ);
          }
        case 121: break;
        case 22: 
          { return new Symbol(sym.LPAREN);
          }
        case 122: break;
        case 40: 
          { return new Symbol(sym.RVBRACKET);
          }
        case 123: break;
        case 19: 
          { return new Symbol(sym.LBRACKET);
          }
        case 124: break;
        case 33: 
          { return new Symbol(sym.NOT_EQ);
          }
        case 125: break;
        case 43: 
          { return new Symbol(sym.LOGIC_NOT);
          }
        case 126: break;
        case 42: 
          { return new Symbol(sym.LOGIC_AND);
          }
        case 127: break;
        case 25: 
          { return new Symbol(sym.RBRACE);
          }
        case 128: break;
        case 10: 
          { return new Symbol(sym.DIV);
          }
        case 129: break;
        case 13: 
          { return new Symbol(sym.BIT_OR);
          }
        case 130: break;
        case 53: 
          { return new Symbol(sym.EQV);
          }
        case 131: break;
        case 29: 
          { // REAL
         return new Symbol(sym.DOUBLE,
         new Double(yytext()));
          }
        case 132: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return new Symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
